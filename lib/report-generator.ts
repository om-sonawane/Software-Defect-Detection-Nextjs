import type { DefectResult } from "@/types/defect"

// Function to generate a PDF report as a Blob
export async function generateDefectReport(
  metrics: Record<string, number>,
  defectDetected: boolean,
  reason?: string,
): Promise<Blob> {
  // In a real application, you would use a library like jsPDF or pdfmake
  // For this example, we'll create a simple HTML report and convert it to a Blob

  const reportDate = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  })

  const reportHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Software Defect Detection Report</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
          padding-bottom: 20px;
          border-bottom: 1px solid #ddd;
        }
        .logo {
          font-size: 24px;
          font-weight: bold;
          margin-bottom: 10px;
        }
        .logo span {
          color: #9333ea;
        }
        .result {
          padding: 20px;
          margin: 20px 0;
          border-radius: 5px;
        }
        .defect-detected {
          background-color: #fee2e2;
          border: 1px solid #ef4444;
        }
        .no-defect {
          background-color: #dcfce7;
          border: 1px solid #22c55e;
        }
        .metrics-table {
          width: 100%;
          border-collapse: collapse;
          margin: 20px 0;
        }
        .metrics-table th, .metrics-table td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        .metrics-table th {
          background-color: #f2f2f2;
        }
        .footer {
          margin-top: 40px;
          text-align: center;
          font-size: 12px;
          color: #666;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="logo">Defect<span>Detect</span></div>
        <div>Software Defect Detection Report</div>
        <div>Generated on: ${reportDate}</div>
      </div>

      <div class="result ${defectDetected ? "defect-detected" : "no-defect"}">
        <h2>${defectDetected ? "⚠️ Software Defect Detected" : "✅ No Software Defect Detected"}</h2>
        ${defectDetected && reason ? `<p><strong>Reason:</strong> ${reason}</p>` : ""}
        <p>${
          defectDetected
            ? "Based on the provided metrics, our model has detected potential defects in your software. Please review the metrics below and consider refactoring the identified areas."
            : "Based on the provided metrics, our model has not detected any potential defects in your software. Your code appears to be of good quality based on the metrics provided."
        }</p>
      </div>

      <h3>Software Metrics Analysis</h3>
      <table class="metrics-table">
        <tr>
          <th>Metric</th>
          <th>Value</th>
          <th>Interpretation</th>
        </tr>
        <tr>
          <td>Lines of Code (LOC)</td>
          <td>${metrics.loc}</td>
          <td>${interpretLOC(metrics.loc)}</td>
        </tr>
        <tr>
          <td>Cyclomatic Complexity (v(g))</td>
          <td>${metrics.vg}</td>
          <td>${interpretCyclomaticComplexity(metrics.vg)}</td>
        </tr>
        <tr>
          <td>Essential Complexity (ev(g))</td>
          <td>${metrics.ev}</td>
          <td>${interpretEssentialComplexity(metrics.ev)}</td>
        </tr>
        <tr>
          <td>Halstead Effort (e)</td>
          <td>${metrics.e}</td>
          <td>${interpretHalsteadEffort(metrics.e)}</td>
        </tr>
        <tr>
          <td>Comment Ratio</td>
          <td>${((metrics.lOComment / (metrics.lOCode || 1)) * 100).toFixed(2)}%</td>
          <td>${interpretCommentRatio(metrics.lOComment / (metrics.lOCode || 1))}</td>
        </tr>
      </table>

      <h3>Recommendations</h3>
      <ul>
        ${generateRecommendations(metrics, defectDetected, reason)
          .map((rec) => `<li>${rec}</li>`)
          .join("")}
      </ul>

      <div class="footer">
        <p>This report was generated by DefectDetect, a machine learning-powered software defect detection platform.</p>
        <p>© ${new Date().getFullYear()} DefectDetect. All rights reserved.</p>
      </div>
    </body>
    </html>
  `

  // Convert HTML to Blob
  const blob = new Blob([reportHtml], { type: "text/html" })
  return blob
}

// Helper functions for metric interpretation
function interpretLOC(loc: number): string {
  if (loc < 50) return "Small module, generally manageable."
  if (loc < 200) return "Medium-sized module, reasonable complexity."
  return "Large module, consider breaking down into smaller components."
}

function interpretCyclomaticComplexity(vg: number): string {
  if (vg <= 5) return "Low complexity, easy to maintain."
  if (vg <= 10) return "Moderate complexity, acceptable."
  if (vg <= 20) return "High complexity, consider refactoring."
  return "Very high complexity, high risk of defects."
}

function interpretEssentialComplexity(ev: number): string {
  if (ev <= 2) return "Well-structured code."
  if (ev <= 4) return "Moderately structured code."
  return "Poorly structured code, consider refactoring."
}

function interpretHalsteadEffort(e: number): string {
  if (e < 500) return "Low effort required to understand and maintain."
  if (e < 1000) return "Moderate effort required to understand and maintain."
  return "High effort required to understand and maintain, consider simplifying."
}

function interpretCommentRatio(ratio: number): string {
  const percentage = ratio * 100
  if (percentage < 5) return "Insufficient comments, add more documentation."
  if (percentage < 15) return "Acceptable comment ratio."
  if (percentage < 30) return "Good comment ratio."
  return "Very high comment ratio, possibly excessive."
}

function generateRecommendations(metrics: Record<string, number>, defectDetected: boolean, reason?: string): string[] {
  const recommendations: string[] = []

  if (!defectDetected) {
    recommendations.push("Continue maintaining the current code quality standards.")
    recommendations.push("Consider implementing automated testing to ensure continued quality.")
    return recommendations
  }

  if (metrics.vg > 10) {
    recommendations.push(
      "Reduce cyclomatic complexity by breaking down complex methods into smaller, more manageable functions.",
    )
  }

  if (metrics.ev > 4) {
    recommendations.push(
      "Improve code structure by eliminating goto statements, reducing nested conditionals, and using more structured control flow.",
    )
  }

  if (metrics.e > 1000) {
    recommendations.push("Simplify code to reduce cognitive load and improve maintainability.")
  }

  if (metrics.lOCode > 100 && metrics.lOComment / metrics.lOCode < 0.1) {
    recommendations.push("Add more comments to improve code documentation and maintainability.")
  }

  if (metrics.branchCount / metrics.loc > 0.3 && metrics.loc > 50) {
    recommendations.push("Reduce the number of branches or refactor into smaller, more focused functions.")
  }

  if (recommendations.length === 0) {
    recommendations.push("Review the identified issues and consider refactoring the problematic areas.")
  }

  return recommendations
}

// Function to download the report
export function downloadReport(blob: Blob, filename = "defect-detection-report.html"): void {
  const url = URL.createObjectURL(blob)
  const a = document.createElement("a")
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

// Function to generate and download a report for a specific defect result
export async function generateAndDownloadReport(defectResult: DefectResult): Promise<void> {
  const blob = await generateDefectReport(defectResult.metrics, defectResult.defect_detected, defectResult.reason)
  downloadReport(blob, `defect-report-${new Date().toISOString().slice(0, 10)}.html`)
}
